{"mappings":";;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;CAYC;;ACZD;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;CAgBC;;AAID,MAAM,wCAAkB;IACtB;QAAC;KAAU;IACX;QAAC;QAAU;KAAM;IACjB;QAAC;QAAU;KAAO;IAClB;QAAC;QAAY;KAAS;IACtB;QAAC;QAAY;KAAa;IAC1B;QAAC;QAAY;KAAO;IACpB;QAAC;QAAS;QAAU;QAAG;KAAO;IAC9B;QAAC;KAAO;IACR;QAAC;KAAQ;CACV;AAEM,MAAM,4CAAgB;IAC3B,SAAS;IACT,KAAK;IACL,MAAM;IACN,QAAQ;IACR,YAAY;IACZ,eAAe;IACf,MAAM;IACN,MAAM;IACN,OAAO;AACT;AAEO,MAAM,4CAAmB,CAAA,GAAA,uBAAS,EAAE;AAE3C,MAAM,kCAAY,CAAA,GAAA,iBAAG,EACnB,CAAA,GAAA,sBAAO,EAAE,wCACT;IAGF,2CAAe;;CDxCd;AAGD,MAAM,mCAAa,CAAA,UAAW,CAAC,GAAG;QAChC,IAAI;YACF,MAAM,IAAI,WAAW;YACrB,IAAG,CAAC,aAAa,SAAS,OAAO;gBAAC;gBAAW;aAAO;YACpD,OAAO,EACF,IAAI,CAAC,CAAA,UAAU;oBAAC;oBAAW;iBAAO,EAClC,KAAK,CAAC,CAAA;gBACL,OAAO;oBAAC,CAAA,GAAA,wCAAQ,EAAE;oBAAa;iBAAU;YAC3C;QACN,EAAE,OAAO,GAAG;YACV,OAAO;gBAAC,CAAA,GAAA,wCAAQ,EAAE;gBAAI;aAAU;QAClC;IACF;IAEA,2CAAe;;;;ADRf,MAAM,kCAAY,CAAA,GAAA,iBAAG,EAAE;AAEvB,MAAM,mCAAa,CAAC,OAAO;IACzB,MAAM,cAAc,CAAA,GAAA,mCAAC,EAAE,SAAS,CAAC;IACjC,OAAO,CAAC,EAAE,MAAM,CAAC,EAAE,YAAY,CAAC;AAClC;AAEO,MAAM,4CAAS,CAAA;IAEpB,MAAM,OAAO,CAAA,GAAA,sCAAI,EAAE,MAAM,CAAC;QACxB,iBAAiB;QACjB,GAAG,MAAM;IACX;IAEA,KAAK,YAAY,CAAC,QAAQ,CACvB,GAAG,CAAC;IAEP,MAAM,MAAM,CAAC,OAAO;QAClB,MAAM,MAAM,iCAAW,OAAO;QAC9B,OAAO,CAAA,GAAA,wCAAS,EAAE,KAAK,GAAG,EAAE;IAC9B;IAEA,MAAM,MAAM,CAAA,GAAA,wCAAS,EAAE,KAAK,GAAG;IAC/B,MAAM,OAAO,CAAA,GAAA,wCAAS,EAAE,KAAK,IAAI;IACjC,MAAM,UAAU,CAAA,GAAA,wCAAS,EAAE,KAAK,MAAM;IAEtC,OAAO;aACL;aACA;cACA;QACA,QAAQ;IACV;AACF","sources":["src/index.js","src/tryPromise.js","src/makeError.js"],"sourcesContent":["/**\n * wrap axios\n * \n * @example \n *   const config = { baseURL: 'http://localhost:3000' }\n *   const http = wrapAxios(config)\n * \n *   async function request() {\n * \n *   const [err, updatedUser] = await http.put('/users/42', { name: 'jo' })\n *   }\n * \n */\nimport axios from 'axios'\nimport qs from 'qs'\n\nimport tryPromise from './tryPromise'\n\nimport { prop } from 'ramda'\n\nconst onSuccess = prop('data')\n\nconst makeGetUrl = (route, query) => {\n  const queryString = qs.stringify(query)\n  return `${route}?${queryString}`\n}\n\nexport const create = config => {\n\n  const http = axios.create({\n    withCredentials: true,\n    ...config,\n  })\n\n  http.interceptors.response\n    .use(onSuccess)\n\n  const get = (route, query) => {\n    const url = makeGetUrl(route, query)\n    return tryPromise(http.get)(url)\n  }\n\n  const put = tryPromise(http.put)\n  const post = tryPromise(http.post)\n  const destroy = tryPromise(http.delete)\n\n  return {\n    get,\n    put,\n    post,\n    delete: destroy\n  }\n}\n","/**\n * allows the use of async / await without try / catch blocks everywhere \n * returns a tuple on await a promise to settle \n * \n * promise => ...args => [err, success]\n * \n * @example \n *   const put = tryPromise(axios.put)\n * \n *   const [err, updatedUser] = await put('/users/42', { name: 'jo' })\n * \n */\nimport makeError from './makeError'\n\nconst tryPromise = promise => (...args) => {  \n  try {\n    const p = promise(...args)\n    if(!p instanceof Promise) return [undefined, result]\n    return p\n        .then(result => [undefined, result])\n        .catch(axiosError => {\n          return [makeError(axiosError), undefined]\n        }) \n  } catch (e) {\n    return [makeError(e), undefined]\n  }\n}\n\nexport default tryPromise","/**\n * prune the axios error \n * ensure the same shape for exceptions \n * default to status 500 for exceptions \n * \n *  {\n *    message: string\n *    url: string\n *    data: string\n *    status: number\n *    statusText: string\n *    response_data: string\n *    port: number\n *    code: string\n *    cause: string\n *  }\n */\nimport { mergeRight, pipe } from 'ramda'\nimport { flatPick } from 'ramjam'\n\nconst axiosErrorPaths = [\n  ['message'],\n  ['config', 'url'],\n  ['config', 'data'],\n  ['response', 'status'],\n  ['response', 'statusText'],\n  ['response', 'data'],\n  ['cause', 'errors', 0, 'port'],\n  ['code'],\n  ['cause']\n]\n\nexport const errorDefaults = {\n  message: 'unknown error',\n  url: '', \n  data: '', \n  status: 500,\n  statusText: 'internal server error',\n  response_data: '',\n  port: '',\n  code: '',\n  cause: ''\n}\n\nexport const setErrorDefaults = mergeRight(errorDefaults)\n\nconst makeError = pipe(\n  flatPick(axiosErrorPaths),\n  setErrorDefaults\n)\n\nexport default makeError\n"],"names":[],"version":3,"file":"main.js.map"}